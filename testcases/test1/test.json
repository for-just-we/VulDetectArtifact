{
    "fileName": "CWE126_Buffer_Overread__CWE129_connect_socket_01.c",
    "functionName": "CWE126_Buffer_Overread__CWE129_connect_socket_01_bad",
    "nodes": [
      "{\"line\": 46, \"edges\": [[0, 1], [1, 2], [1, 3]], \"contents\": [[\"IdentifierDeclStatement\", \"int data ;\"], [\"IdentifierDecl\", \"data\"], [\"IdentifierDeclType\", \"int\"], [\"Identifier\", \"data\"]]}",
      "{\"line\": 48, \"edges\": [[0, 1], [1, 2], [1, 3], [3, 4], [3, 5]], \"contents\": [[\"ExpressionStatement\", \"data = - 1\"], [\"AssignmentExpression\", \"data = - 1\"], [\"Identifier\", \"data\"], [\"UnaryOperationExpression\", \"- 1\"], [\"UnaryOperator\", \"-\"], [\"PrimaryExpression\", \"1\"]]}",
      "{\"line\": 51, \"edges\": [[0, 1], [1, 2], [1, 3]], \"contents\": [[\"IdentifierDeclStatement\", \"WSADATA wsaData ;\"], [\"IdentifierDecl\", \"wsaData\"], [\"IdentifierDeclType\", \"WSADATA\"], [\"Identifier\", \"wsaData\"]]}",
      "{\"line\": 52, \"edges\": [[0, 1], [1, 2], [1, 3], [1, 4], [4, 5], [4, 6]], \"contents\": [[\"IdentifierDeclStatement\", \"int wsaDataInit = 0 ;\"], [\"IdentifierDecl\", \"wsaDataInit = 0\"], [\"IdentifierDeclType\", \"int\"], [\"Identifier\", \"wsaDataInit\"], [\"AssignmentExpression\", \"wsaDataInit = 0\"], [\"Identifier\", \"wsaDataInit\"], [\"PrimaryExpression\", \"0\"]]}",
      "{\"line\": 54, \"edges\": [[0, 1], [1, 2], [1, 3]], \"contents\": [[\"IdentifierDeclStatement\", \"int recvResult ;\"], [\"IdentifierDecl\", \"recvResult\"], [\"IdentifierDeclType\", \"int\"], [\"Identifier\", \"recvResult\"]]}",
      "{\"line\": 55, \"edges\": [[0, 1], [1, 2], [1, 3]], \"contents\": [[\"IdentifierDeclStatement\", \"struct sockaddr_in service ;\"], [\"IdentifierDecl\", \"service\"], [\"IdentifierDeclType\", \"struct sockaddr_in\"], [\"Identifier\", \"service\"]]}",
      "{\"line\": 56, \"edges\": [[0, 1], [1, 2], [1, 3], [1, 4], [4, 5], [4, 6]], \"contents\": [[\"IdentifierDeclStatement\", \"SOCKET connectSocket = INVALID_SOCKET ;\"], [\"IdentifierDecl\", \"connectSocket = INVALID_SOCKET\"], [\"IdentifierDeclType\", \"SOCKET\"], [\"Identifier\", \"connectSocket\"], [\"AssignmentExpression\", \"connectSocket = INVALID_SOCKET\"], [\"Identifier\", \"INVALID_SOCKET\"], [\"Identifier\", \"INVALID_SOCKET\"]]}",
      "{\"line\": 57, \"edges\": [[0, 1], [1, 2], [1, 3], [1, 4]], \"contents\": [[\"IdentifierDeclStatement\", \"char inputBuffer [ CHAR_ARRAY_SIZE ] ;\"], [\"IdentifierDecl\", \"inputBuffer [ CHAR_ARRAY_SIZE ]\"], [\"IdentifierDeclType\", \"char [ CHAR_ARRAY_SIZE ]\"], [\"Identifier\", \"inputBuffer\"], [\"Identifier\", \"CHAR_ARRAY_SIZE\"]]}",
      "{\"line\": 61, \"edges\": [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [8, 9], [7, 10], [10, 11], [11, 12], [10, 13], [13, 14], [5, 15], [15, 16], [16, 17], [16, 18], [1, 19]], \"contents\": [[\"Condition\", \"WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR\"], [\"EqualityExpression\", \"WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR\"], [\"CallExpression\", \"WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData )\"], [\"Callee\", \"WSAStartup\"], [\"Identifier\", \"WSAStartup\"], [\"ArgumentList\", \"MAKEWORD ( 2 , 2 )\"], [\"Argument\", \"MAKEWORD ( 2 , 2 )\"], [\"CallExpression\", \"MAKEWORD ( 2 , 2 )\"], [\"Callee\", \"MAKEWORD\"], [\"Identifier\", \"MAKEWORD\"], [\"ArgumentList\", \"2\"], [\"Argument\", \"2\"], [\"PrimaryExpression\", \"2\"], [\"Argument\", \"2\"], [\"PrimaryExpression\", \"2\"], [\"Argument\", \"& wsaData\"], [\"UnaryOperationExpression\", \"& wsaData\"], [\"UnaryOperator\", \"&\"], [\"Identifier\", \"wsaData\"], [\"Identifier\", \"NO_ERROR\"]]}",
      "{\"line\": 63, \"edges\": [], \"contents\": [[\"BreakStatement\", \"break ;\"]]}",
      "{\"line\": 65, \"edges\": [[0, 1], [1, 2], [1, 3]], \"contents\": [[\"ExpressionStatement\", \"wsaDataInit = 1\"], [\"AssignmentExpression\", \"wsaDataInit = 1\"], [\"Identifier\", \"wsaDataInit\"], [\"PrimaryExpression\", \"1\"]]}",
      "{\"line\": 68, \"edges\": [[0, 1], [1, 2], [1, 3], [3, 4], [4, 5], [3, 6], [6, 7], [7, 8], [6, 9], [9, 10], [6, 11], [11, 12]], \"contents\": [[\"ExpressionStatement\", \"connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP )\"], [\"AssignmentExpression\", \"connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP )\"], [\"Identifier\", \"connectSocket\"], [\"CallExpression\", \"socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP )\"], [\"Callee\", \"socket\"], [\"Identifier\", \"socket\"], [\"ArgumentList\", \"AF_INET\"], [\"Argument\", \"AF_INET\"], [\"Identifier\", \"AF_INET\"], [\"Argument\", \"SOCK_STREAM\"], [\"Identifier\", \"SOCK_STREAM\"], [\"Argument\", \"IPPROTO_TCP\"], [\"Identifier\", \"IPPROTO_TCP\"]]}",
      "{\"line\": 69, \"edges\": [[0, 1], [1, 2], [1, 3]], \"contents\": [[\"Condition\", \"connectSocket == INVALID_SOCKET\"], [\"EqualityExpression\", \"connectSocket == INVALID_SOCKET\"], [\"Identifier\", \"connectSocket\"], [\"Identifier\", \"INVALID_SOCKET\"]]}",
      "{\"line\": 71, \"edges\": [], \"contents\": [[\"BreakStatement\", \"break ;\"]]}",
      "{\"line\": 73, \"edges\": [[0, 1], [1, 2], [2, 3], [1, 4], [4, 5], [5, 6], [6, 7], [6, 8], [4, 9], [9, 10], [4, 11], [11, 12], [12, 13], [12, 14]], \"contents\": [[\"ExpressionStatement\", \"memset ( & service , 0 , sizeof ( service ) )\"], [\"CallExpression\", \"memset ( & service , 0 , sizeof ( service ) )\"], [\"Callee\", \"memset\"], [\"Identifier\", \"memset\"], [\"ArgumentList\", \"& service\"], [\"Argument\", \"& service\"], [\"UnaryOperationExpression\", \"& service\"], [\"UnaryOperator\", \"&\"], [\"Identifier\", \"service\"], [\"Argument\", \"0\"], [\"PrimaryExpression\", \"0\"], [\"Argument\", \"sizeof ( service )\"], [\"SizeofExpression\", \"sizeof ( service )\"], [\"Sizeof\", \"sizeof\"], [\"SizeofOperand\", \"service\"]]}",
      "{\"line\": 74, \"edges\": [[0, 1], [1, 2], [2, 3], [2, 4], [1, 5]], \"contents\": [[\"ExpressionStatement\", \"service . sin_family = AF_INET\"], [\"AssignmentExpression\", \"service . sin_family = AF_INET\"], [\"MemberAccess\", \"service . sin_family\"], [\"Identifier\", \"service\"], [\"Identifier\", \"sin_family\"], [\"Identifier\", \"AF_INET\"]]}",
      "{\"line\": 75, \"edges\": [[0, 1], [1, 2], [2, 3], [3, 4], [3, 5], [2, 6], [1, 7], [7, 8], [8, 9], [7, 10], [10, 11], [11, 12]], \"contents\": [[\"ExpressionStatement\", \"service . sin_addr . s_addr = inet_addr ( IP_ADDRESS )\"], [\"AssignmentExpression\", \"service . sin_addr . s_addr = inet_addr ( IP_ADDRESS )\"], [\"MemberAccess\", \"service . sin_addr . s_addr\"], [\"MemberAccess\", \"service . sin_addr\"], [\"Identifier\", \"service\"], [\"Identifier\", \"sin_addr\"], [\"Identifier\", \"s_addr\"], [\"CallExpression\", \"inet_addr ( IP_ADDRESS )\"], [\"Callee\", \"inet_addr\"], [\"Identifier\", \"inet_addr\"], [\"ArgumentList\", \"IP_ADDRESS\"], [\"Argument\", \"IP_ADDRESS\"], [\"Identifier\", \"IP_ADDRESS\"]]}",
      "{\"line\": 76, \"edges\": [[0, 1], [1, 2], [2, 3], [2, 4], [1, 5], [5, 6], [6, 7], [5, 8], [8, 9], [9, 10]], \"contents\": [[\"ExpressionStatement\", \"service . sin_port = htons ( TCP_PORT )\"], [\"AssignmentExpression\", \"service . sin_port = htons ( TCP_PORT )\"], [\"MemberAccess\", \"service . sin_port\"], [\"Identifier\", \"service\"], [\"Identifier\", \"sin_port\"], [\"CallExpression\", \"htons ( TCP_PORT )\"], [\"Callee\", \"htons\"], [\"Identifier\", \"htons\"], [\"ArgumentList\", \"TCP_PORT\"], [\"Argument\", \"TCP_PORT\"], [\"Identifier\", \"TCP_PORT\"]]}",
      "{\"line\": 77, \"edges\": [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [5, 8], [8, 9], [9, 10], [9, 11], [11, 12], [11, 13], [5, 14], [14, 15], [15, 16], [15, 17], [1, 18]], \"contents\": [[\"Condition\", \"connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == SOCKET_ERROR\"], [\"EqualityExpression\", \"connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == SOCKET_ERROR\"], [\"CallExpression\", \"connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) )\"], [\"Callee\", \"connect\"], [\"Identifier\", \"connect\"], [\"ArgumentList\", \"connectSocket\"], [\"Argument\", \"connectSocket\"], [\"Identifier\", \"connectSocket\"], [\"Argument\", \"( struct sockaddr * ) & service\"], [\"CastExpression\", \"( struct sockaddr * ) & service\"], [\"CastTarget\", \"struct sockaddr *\"], [\"UnaryOperationExpression\", \"& service\"], [\"UnaryOperator\", \"&\"], [\"Identifier\", \"service\"], [\"Argument\", \"sizeof ( service )\"], [\"SizeofExpression\", \"sizeof ( service )\"], [\"Sizeof\", \"sizeof\"], [\"SizeofOperand\", \"service\"], [\"Identifier\", \"SOCKET_ERROR\"]]}",
      "{\"line\": 79, \"edges\": [], \"contents\": [[\"BreakStatement\", \"break ;\"]]}",
      "{\"line\": 83, \"edges\": [[0, 1], [1, 2], [1, 3], [3, 4], [4, 5], [3, 6], [6, 7], [7, 8], [6, 9], [9, 10], [6, 11], [11, 12], [12, 13], [12, 14], [6, 15], [15, 16]], \"contents\": [[\"ExpressionStatement\", \"recvResult = recv ( connectSocket , inputBuffer , CHAR_ARRAY_SIZE - 1 , 0 )\"], [\"AssignmentExpression\", \"recvResult = recv ( connectSocket , inputBuffer , CHAR_ARRAY_SIZE - 1 , 0 )\"], [\"Identifier\", \"recvResult\"], [\"CallExpression\", \"recv ( connectSocket , inputBuffer , CHAR_ARRAY_SIZE - 1 , 0 )\"], [\"Callee\", \"recv\"], [\"Identifier\", \"recv\"], [\"ArgumentList\", \"connectSocket\"], [\"Argument\", \"connectSocket\"], [\"Identifier\", \"connectSocket\"], [\"Argument\", \"inputBuffer\"], [\"Identifier\", \"inputBuffer\"], [\"Argument\", \"CHAR_ARRAY_SIZE - 1\"], [\"AdditiveExpression\", \"CHAR_ARRAY_SIZE - 1\"], [\"Identifier\", \"CHAR_ARRAY_SIZE\"], [\"PrimaryExpression\", \"1\"], [\"Argument\", \"0\"], [\"PrimaryExpression\", \"0\"]]}",
      "{\"line\": 84, \"edges\": [[0, 1], [1, 2], [2, 3], [2, 4], [1, 5], [5, 6], [5, 7]], \"contents\": [[\"Condition\", \"recvResult == SOCKET_ERROR || recvResult == 0\"], [\"OrExpression\", \"recvResult == SOCKET_ERROR || recvResult == 0\"], [\"EqualityExpression\", \"recvResult == SOCKET_ERROR\"], [\"Identifier\", \"recvResult\"], [\"Identifier\", \"SOCKET_ERROR\"], [\"EqualityExpression\", \"recvResult == 0\"], [\"Identifier\", \"recvResult\"], [\"PrimaryExpression\", \"0\"]]}",
      "{\"line\": 86, \"edges\": [], \"contents\": [[\"BreakStatement\", \"break ;\"]]}",
      "{\"line\": 89, \"edges\": [[0, 1], [1, 2], [2, 3], [2, 4], [1, 5]], \"contents\": [[\"ExpressionStatement\", \"inputBuffer [ recvResult ] = '\\\\\\\\0'\"], [\"AssignmentExpression\", \"inputBuffer [ recvResult ] = '\\\\\\\\0'\"], [\"ArrayIndexing\", \"inputBuffer [ recvResult ]\"], [\"Identifier\", \"inputBuffer\"], [\"Identifier\", \"recvResult\"], [\"PrimaryExpression\", \"'\\\\\\\\0'\"]]}",
      "{\"line\": 91, \"edges\": [[0, 1], [1, 2], [1, 3], [3, 4], [4, 5], [3, 6], [6, 7], [7, 8]], \"contents\": [[\"ExpressionStatement\", \"data = atoi ( inputBuffer )\"], [\"AssignmentExpression\", \"data = atoi ( inputBuffer )\"], [\"Identifier\", \"data\"], [\"CallExpression\", \"atoi ( inputBuffer )\"], [\"Callee\", \"atoi\"], [\"Identifier\", \"atoi\"], [\"ArgumentList\", \"inputBuffer\"], [\"Argument\", \"inputBuffer\"], [\"Identifier\", \"inputBuffer\"]]}",
      "{\"line\": 93, \"edges\": [[0, 1]], \"contents\": [[\"Condition\", \"0\"], [\"PrimaryExpression\", \"0\"]]}",
      "{\"line\": 94, \"edges\": [[0, 1], [1, 2], [1, 3]], \"contents\": [[\"Condition\", \"connectSocket != INVALID_SOCKET\"], [\"EqualityExpression\", \"connectSocket != INVALID_SOCKET\"], [\"Identifier\", \"connectSocket\"], [\"Identifier\", \"INVALID_SOCKET\"]]}",
      "{\"line\": 96, \"edges\": [[0, 1], [1, 2], [2, 3], [1, 4], [4, 5], [5, 6]], \"contents\": [[\"ExpressionStatement\", \"CLOSE_SOCKET ( connectSocket )\"], [\"CallExpression\", \"CLOSE_SOCKET ( connectSocket )\"], [\"Callee\", \"CLOSE_SOCKET\"], [\"Identifier\", \"CLOSE_SOCKET\"], [\"ArgumentList\", \"connectSocket\"], [\"Argument\", \"connectSocket\"], [\"Identifier\", \"connectSocket\"]]}",
      "{\"line\": 99, \"edges\": [[0, 1]], \"contents\": [[\"Condition\", \"wsaDataInit\"], [\"Identifier\", \"wsaDataInit\"]]}",
      "{\"line\": 101, \"edges\": [[0, 1], [1, 2], [2, 3], [1, 4]], \"contents\": [[\"ExpressionStatement\", \"WSACleanup ( )\"], [\"CallExpression\", \"WSACleanup ( )\"], [\"Callee\", \"WSACleanup\"], [\"Identifier\", \"WSACleanup\"], [\"ArgumentList\", \"\"]]}",
      "{\"line\": 106, \"edges\": [[0, 1], [1, 2], [1, 3], [1, 4], [1, 5], [5, 6], [5, 7], [7, 8]], \"contents\": [[\"IdentifierDeclStatement\", \"int buffer [ 10 ] = { 0 } ;\"], [\"IdentifierDecl\", \"buffer [ 10 ] = { 0 }\"], [\"IdentifierDeclType\", \"int [ 10 ]\"], [\"Identifier\", \"buffer\"], [\"PrimaryExpression\", \"10\"], [\"AssignmentExpression\", \"buffer [ 10 ] = { 0 }\"], [\"Identifier\", \"buffer\"], [\"InitializerList\", \"0\"], [\"PrimaryExpression\", \"0\"]]}",
      "{\"line\": 109, \"edges\": [[0, 1], [1, 2], [1, 3]], \"contents\": [[\"Condition\", \"data >= 0\"], [\"RelationalExpression\", \"data >= 0\"], [\"Identifier\", \"data\"], [\"PrimaryExpression\", \"0\"]]}",
      "{\"line\": 111, \"edges\": [[0, 1], [1, 2], [2, 3], [1, 4], [4, 5], [5, 6], [6, 7], [6, 8]], \"contents\": [[\"ExpressionStatement\", \"printIntLine ( buffer [ data ] )\"], [\"CallExpression\", \"printIntLine ( buffer [ data ] )\"], [\"Callee\", \"printIntLine\"], [\"Identifier\", \"printIntLine\"], [\"ArgumentList\", \"buffer [ data ]\"], [\"Argument\", \"buffer [ data ]\"], [\"ArrayIndexing\", \"buffer [ data ]\"], [\"Identifier\", \"buffer\"], [\"Identifier\", \"data\"]]}",
      "{\"line\": 115, \"edges\": [[0, 1], [1, 2], [2, 3], [1, 4], [4, 5], [5, 6]], \"contents\": [[\"ExpressionStatement\", \"printLine ( \\\"ERROR: Array index is negative\\\" )\"], [\"CallExpression\", \"printLine ( \\\"ERROR: Array index is negative\\\" )\"], [\"Callee\", \"printLine\"], [\"Identifier\", \"printLine\"], [\"ArgumentList\", \"\\\"ERROR: Array index is negative\\\"\"], [\"Argument\", \"\\\"ERROR: Array index is negative\\\"\"], [\"PrimaryExpression\", \"\\\"ERROR: Array index is negative\\\"\"]]}"
    ],
    "cfgEdges": [
      "[0, 1]",
      "[1, 2]",
      "[2, 3]",
      "[3, 4]",
      "[4, 5]",
      "[5, 6]",
      "[6, 7]",
      "[7, 8]",
      "[25, 8]",
      "[25, 26]",
      "[8, 9]",
      "[8, 10]",
      "[9, 26]",
      "[10, 11]",
      "[11, 12]",
      "[12, 13]",
      "[12, 14]",
      "[13, 26]",
      "[14, 15]",
      "[15, 16]",
      "[16, 17]",
      "[17, 18]",
      "[18, 19]",
      "[18, 20]",
      "[19, 26]",
      "[20, 21]",
      "[21, 22]",
      "[21, 23]",
      "[22, 26]",
      "[23, 24]",
      "[24, 25]",
      "[26, 27]",
      "[26, 28]",
      "[27, 28]",
      "[28, 29]",
      "[28, 30]",
      "[29, 30]",
      "[30, 31]",
      "[31, 32]",
      "[31, 33]"
    ],
    "cdgEdges": [
      "[25, 8]",
      "[8, 9]",
      "[8, 10]",
      "[8, 11]",
      "[8, 12]",
      "[12, 13]",
      "[12, 14]",
      "[12, 15]",
      "[12, 16]",
      "[12, 17]",
      "[12, 18]",
      "[18, 19]",
      "[18, 20]",
      "[18, 21]",
      "[21, 22]",
      "[21, 23]",
      "[21, 24]",
      "[21, 25]",
      "[26, 27]",
      "[28, 29]",
      "[31, 32]",
      "[31, 33]"
    ],
    "ddgEdges": [
      "[1, 31]",
      "[24, 31]",
      "[1, 32]",
      "[24, 32]",
      "[10, 28]",
      "[3, 28]",
      "[6, 12]",
      "[6, 26]",
      "[16, 16]",
      "[30, 32]",
      "[7, 20]",
      "[7, 23]",
      "[7, 24]",
      "[11, 12]",
      "[11, 18]",
      "[11, 20]",
      "[6, 26]",
      "[11, 26]",
      "[6, 27]",
      "[11, 27]",
      "[5, 15]",
      "[17, 15]",
      "[15, 16]",
      "[16, 17]",
      "[20, 21]",
      "[20, 23]"
    ],
    "testcase-path": "125-c/testcases/000/075/598/CWE126_Buffer_Overread__CWE129_connect_socket_01.c"
  }